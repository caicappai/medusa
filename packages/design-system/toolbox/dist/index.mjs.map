{"version":3,"sources":["../src/create-cli.ts","../src/figma-client.ts","../src/figma/index.ts","../src/figma/client.ts","../src/figma/utils.ts","../src/commands/icons/command.ts","../src/commands/icons/utils/generate-index.ts","../src/commands/icons/utils/get-icon-data.ts","../src/transformers/transform-svg.ts","../src/templates/icon-templates.ts","../src/constants.ts","../src/logger.ts","../src/commands/tokens/command.ts","../src/commands/tokens/utils/colors.ts","../src/commands/tokens/utils/effects.ts","../package.json","../src/index.ts"],"sourcesContent":["import { Command } from \"commander\"\n\nimport { generateIcons } from \"@/commands/icons/command\"\nimport { generateTokens } from \"@/commands/tokens/command\"\n\nimport pkg from \"../package.json\"\n\nexport async function createCli() {\n  const program = new Command()\n\n  program.name(\"toolbox\").version(pkg.version)\n\n  // Icon\n\n  const generateIconsCommand = program.command(\"icons\")\n  generateIconsCommand.description(\"Generate icons from Figma\")\n\n  generateIconsCommand.option(\"-o, --output <path>\", \"Output directory\")\n\n  generateIconsCommand.action(generateIcons)\n\n  // Color tokens\n\n  const generateTokensCommand = program.command(\"tokens\")\n  generateTokensCommand.description(\"Generate tokens from Figma\")\n\n  generateTokensCommand.option(\"-o, --output <path>\", \"Output directory\")\n\n  generateTokensCommand.action(generateTokens)\n\n  return program\n}\n","import dotenv from \"dotenv\"\nimport { resolve } from \"path\"\nimport Figma from \"./figma\"\n\ndotenv.config({ path: resolve(process.cwd(), \".env\") })\n\nconst accessToken = process.env.FIGMA_TOKEN || \"\"\n\nif (!accessToken) {\n  throw new Error(\"FIGMA_TOKEN is not defined\")\n}\n\nexport const client = new Figma({\n  accessToken: accessToken,\n  maxRetries: 3,\n})\n","import axios from \"axios\"\nimport Client, { ClientArgs } from \"./client\"\nimport {\n  FrameOffset,\n  GetCommentsResult,\n  GetComponentResult,\n  GetComponentSetResult,\n  GetFileComponentSetsResult,\n  GetFileComponentsResult,\n  GetFileNodesResult,\n  GetFileResult,\n  GetFileStylesResult,\n  GetImageFillsResult,\n  GetImageResult,\n  GetProjectFilesResult,\n  GetStyleResult,\n  GetTeamComponentSetsResult,\n  GetTeamComponentsResult,\n  GetTeamProjectsResult,\n  GetTeamStylesResult,\n  GetVersionsResult,\n  NodeType,\n  PostCommentResult,\n  Vector,\n} from \"./types\"\nimport { encodeQuery } from \"./utils\"\n\ntype FigmaArgs = Omit<ClientArgs, \"baseURL\">\n\nconst FIGMA_BASE_URL = \"https://api.figma.com/v1/\"\n\nclass Figma {\n  private _api: Client\n\n  constructor({ accessToken, maxRetries = 3 }: FigmaArgs) {\n    this._api = new Client({\n      accessToken,\n      baseURL: FIGMA_BASE_URL,\n      maxRetries,\n    })\n  }\n\n  /**\n   * Get a resource by its URL.\n   */\n  async getResource(url: string) {\n    const response = await axios.get(url)\n\n    if (Math.floor(response.status / 100) !== 2) {\n      throw response.statusText\n    }\n\n    return response.data\n  }\n\n  async getFile(\n    file_key: string,\n    options?: {\n      /** A specific version ID to get. Omitting this will get the current version of the file */\n      version?: string\n      /** If specified, only a subset of the document will be returned corresponding to the nodes listed, their children, and everything between the root node and the listed nodes */\n      ids?: string[]\n      /** Positive integer representing how deep into the document tree to traverse. For example, setting this to 1 returns only Pages, setting it to 2 returns Pages and all top level objects on each page. Not setting this parameter returns all nodes */\n      depth?: number\n      /** Set to \"paths\" to export vector data */\n      geometry?: \"paths\"\n      /** A comma separated list of plugin IDs and/or the string \"shared\". Any data present in the document written by those plugins will be included in the result in the `pluginData` and `sharedPluginData` properties. */\n      plugin_data?: string\n      /** Set to returns branch metadata for the requested file */\n      branch_data?: boolean\n    }\n  ): Promise<GetFileResult> {\n    const queryString = options\n      ? `?${encodeQuery({\n          ...options,\n          ids: options.ids && options.ids.join(\",\"),\n        })}`\n      : \"\"\n\n    return this._api.request(\"GET\", `files/${file_key}${queryString}`)\n  }\n\n  async getFileNodes<TNode extends NodeType = \"DOCUMENT\">(\n    file_key: string,\n    options: {\n      /** A comma separated list of node IDs to retrieve and convert */\n      ids: string[]\n      /** A specific version ID to get. Omitting this will get the current version of the file */\n      version?: string\n      /** Positive integer representing how deep into the document tree to traverse. For example, setting this to 1 returns only Pages, setting it to 2 returns Pages and all top level objects on each page. Not setting this parameter returns all nodes */\n      depth?: number\n      /** Set to \"paths\" to export vector data */\n      geometry?: \"paths\"\n      /** A comma separated list of plugin IDs and/or the string \"shared\". Any data present in the document written by those plugins will be included in the result in the `pluginData` and `sharedPluginData` properties. */\n      plugin_data?: string\n    }\n  ): Promise<GetFileNodesResult<TNode>> {\n    const queryString = `?${encodeQuery({\n      ...options,\n      ids: options.ids.join(\",\"),\n    })}`\n\n    return this._api.request(\"GET\", `files/${file_key}/nodes${queryString}`)\n  }\n\n  async getImage(\n    file_key: string,\n    options: {\n      /** A comma separated list of node IDs to render */\n      ids: string[]\n      /** A number between 0.01 and 4, the image scaling factor */\n      scale: number\n      /** A string enum for the image output format */\n      format: \"jpg\" | \"png\" | \"svg\" | \"pdf\"\n      /** Whether to include id attributes for all SVG elements. `Default: false` */\n      svg_include_id?: boolean\n      /** Whether to simplify inside/outside strokes and use stroke attribute if possible instead of <mask>. `Default: true` */\n      svg_simplify_stroke?: boolean\n      /** Use the full dimensions of the node regardless of whether or not it is cropped or the space around it is empty. Use this to export text nodes without cropping. `Default: false` */\n      use_absolute_bounds?: boolean\n      /** A specific version ID to get. Omitting this will get the current version of the file */\n      version?: string\n    }\n  ): Promise<GetImageResult> {\n    const queryString = options\n      ? `?${encodeQuery({\n          ...options,\n          ids: options.ids && options.ids.join(\",\"),\n        })}`\n      : \"\"\n\n    return this._api.request(\"GET\", `images/${file_key}${queryString}`)\n  }\n\n  async getImageFills(file_key: string): Promise<GetImageFillsResult> {\n    return this._api.request(\"GET\", `files/${file_key}/images`)\n  }\n\n  async getComments(file_key: string): Promise<GetCommentsResult> {\n    return this._api.request(\"GET\", `files/${file_key}/comments`)\n  }\n\n  async postComment(\n    file_key: string,\n    /** The text contents of the comment to post */\n    message: string,\n    /** The position of where to place the comment. This can either be an absolute canvas position or the relative position within a frame. */\n    client_meta: Vector | FrameOffset,\n    /** (Optional) The comment to reply to, if any. This must be a root comment, that is, you cannot reply to a comment that is a reply itself (a reply has a parent_id). */\n    comment_id?: string\n  ): Promise<PostCommentResult> {\n    return this._api.request(\"POST\", `files/${file_key}/comments`, {\n      message,\n      client_meta,\n      comment_id,\n    })\n  }\n\n  async deleteComment(file_key: string, comment_id: string): Promise<void> {\n    return this._api.request(\n      \"DELETE\",\n      `files/${file_key}/comments/${comment_id}`\n    )\n  }\n\n  async getVersions(file_key: string): Promise<GetVersionsResult> {\n    return this._api.request(\"GET\", `files/${file_key}/versions`)\n  }\n\n  async getTeamProjects(teamId: string): Promise<GetTeamProjectsResult> {\n    return this._api.request(\"GET\", `teams/${teamId}/projects`)\n  }\n\n  async getProjectFiles(\n    project_id: string,\n    options: {\n      /** Set to returns branch metadata for the requested file */\n      branch_data?: boolean\n    }\n  ): Promise<GetProjectFilesResult> {\n    const queryString = options\n      ? `?${encodeQuery({\n          ...options,\n        })}`\n      : \"\"\n\n    return this._api.request(\n      \"GET\",\n      `projects/${project_id}/files${queryString}`\n    )\n  }\n\n  /**\n   * Get a paginated list of published components within a team library\n   */\n  async getTeamComponents(\n    team_id: string,\n    options: {\n      /** Number of items in a paged list of results. Defaults to 30. */\n      page_size?: number\n      /** Cursor indicating which id after which to start retrieving components for. Exclusive with before. The cursor value is an internally tracked integer that doesn't correspond to any Ids */\n      after?: number\n      /** Cursor indicating which id before which to start retrieving components for. Exclusive with after. The cursor value is an internally tracked integer that doesn't correspond to any Ids */\n      before?: number\n    }\n  ): Promise<GetTeamComponentsResult> {\n    const queryString = options ? `?${encodeQuery(options)}` : \"\"\n\n    return this._api.request(\"GET\", `teams/${team_id}/components${queryString}`)\n  }\n\n  /**\n   * Get a list of published components within a file library\n   */\n  async getFileComponents(file_key: string): Promise<GetFileComponentsResult> {\n    return this._api.request(\"GET\", `files/${file_key}/components`)\n  }\n\n  /**\n   * Get metadata on a component by key.\n   */\n  async getComponent(component_key: string): Promise<GetComponentResult> {\n    return this._api.request(\"GET\", `components/${component_key}`)\n  }\n\n  /**\n   * Get a paginated list of published component_sets within a team library\n   */\n  async getTeamComponentSets(\n    team_id: string,\n    options: {\n      /** Number of items in a paged list of results. Defaults to 30. */\n      page_size?: number\n      /** Cursor indicating which id after which to start retrieving component sets for. Exclusive with before. The cursor value is an internally tracked integer that doesn't correspond to any Ids */\n      after?: number\n      /** Cursor indicating which id before which to start retrieving component sets for. Exclusive with after. The cursor value is an internally tracked integer that doesn't correspond to any Ids */\n      before?: number\n    }\n  ): Promise<GetTeamComponentSetsResult> {\n    const queryString = options ? `?${encodeQuery(options)}` : \"\"\n\n    return this._api.request(\n      \"GET\",\n      `teams/${team_id}/component_sets${queryString}`\n    )\n  }\n\n  async getFileComponentSets(\n    file_key: string\n  ): Promise<GetFileComponentSetsResult> {\n    return this._api.request(\"GET\", `files/${file_key}/component_sets`)\n  }\n\n  /**\n   * Get metadata on a component_set by key.\n   */\n  async getComponentSet(key: string): Promise<GetComponentSetResult> {\n    return this._api.request(\"GET\", `component_sets/${key}`)\n  }\n\n  /**\n   * Get a paginated list of published styles within a team library\n   */\n  async getTeamStyles(\n    team_id: string,\n    options: {\n      /** Number of items in a paged list of results. Defaults to 30. */\n      page_size?: number\n      /** Cursor indicating which id after which to start retrieving styles for. Exclusive with before. The cursor value is an internally tracked integer that doesn't correspond to any Ids */\n      after?: number\n      /** Cursor indicating which id before which to start retrieving styles for. Exclusive with after. The cursor value is an internally tracked integer that doesn't correspond to any Ids */\n      before?: number\n    }\n  ): Promise<GetTeamStylesResult> {\n    const queryString = options ? `?${encodeQuery(options)}` : \"\"\n\n    return this._api.request(\"GET\", `teams/${team_id}/styles${queryString}`)\n  }\n\n  /**\n   * Get a list of published styles within a file library\n   */\n  async getFileStyles(file_key: string): Promise<GetFileStylesResult> {\n    return this._api.request(\"GET\", `files/${file_key}/styles`)\n  }\n\n  /**\n   * Get metadata on a style by key.\n   */\n  async getStyle(key: string): Promise<GetStyleResult> {\n    return this._api.request(\"GET\", `styles/${key}`)\n  }\n\n  // Variables - Beta API (TODO)\n\n  // Webhooks - Beta API (TODO)\n\n  // Activity Logs - Beta API (TODO)\n\n  // Payments - Beta API (TODO)\n\n  // Dev Resources - Beta API (TODO)\n}\n\nexport * from \"./assertions\"\nexport * from \"./types\"\n\nexport default Figma\n","import axios, { AxiosInstance, AxiosRequestConfig, Method } from \"axios\"\nimport axiosRetry from \"axios-retry\"\n\nexport type ClientArgs = {\n  accessToken: string\n  baseURL: string\n  maxRetries?: number\n}\n\nclass Client {\n  private _axios: AxiosInstance\n\n  constructor({ accessToken, baseURL, maxRetries = 3 }: ClientArgs) {\n    const instance = axios.create({\n      baseURL,\n      headers: {\n        \"X-FIGMA-TOKEN\": accessToken,\n      },\n    })\n\n    // Typecast to any because our monorepo is using an older version of axios-retry and axios\n    axiosRetry(instance as any, {\n      retries: maxRetries,\n      retryDelay: axiosRetry.exponentialDelay,\n    })\n\n    this._axios = instance\n  }\n\n  async request(\n    method: Method,\n    url: string,\n    payload: Record<string, any> = {},\n    config?: AxiosRequestConfig\n  ) {\n    const requestConfig: AxiosRequestConfig = {\n      method,\n      url,\n      ...config,\n    }\n\n    if ([\"POST\", \"DELETE\"].includes(method)) {\n      requestConfig.data = payload\n    }\n\n    const response = await this._axios.request(requestConfig)\n\n    if (Math.floor(response.status / 100) !== 2) {\n      throw response.statusText\n    }\n\n    return response.data\n  }\n}\n\nexport default Client\n","import { Node, NodeType } from \"./types\"\n\n/**\n * Checks if a node is of a certain type.\n */\nexport function isNodeType<NType extends NodeType, R = Node<NType>>(\n  node: Node<any>,\n  type: NType\n): node is R {\n  return node.type === type\n}\n\n/**\n * Encodes an object into a query string.\n */\nexport function encodeQuery(obj: any): string {\n  if (!obj) {\n    return \"\"\n  }\n\n  return Object.entries(obj)\n    .map(([k, v]) => k && v && `${k}=${encodeURIComponent(v as any)}`)\n    .filter(Boolean)\n    .join(\"&\")\n}\n","import { client } from \"@/figma-client\"\nimport fse from \"fs-extra\"\nimport { extname, join, resolve } from \"path\"\nimport dedent from \"ts-dedent\"\n\nimport { generateIndex, getIconData } from \"@/commands/icons/utils\"\nimport { transformSvg } from \"@/transformers\"\n\nimport { FIGMA_FILE_ID, FIGMA_ICONS_NODE_ID } from \"@/constants\"\nimport { logger } from \"@/logger\"\n\ntype GenerateIconsArgs = {\n  output: string\n}\n\n// We don't want to generate icons for these frames as they are not optimized\nconst BANNED_FRAMES = [\"Flags\"]\n\nexport async function generateIcons({ output }: GenerateIconsArgs) {\n  const skippedIcons: string[] = []\n\n  // Ensure the destination directory exists\n  await fse.mkdirp(output)\n\n  logger.info(\"Fetching components from Figma\")\n\n  const fileComponents = await client\n    .getFileComponents(FIGMA_FILE_ID)\n    .then((file) => {\n      logger.success(\"Successfully fetched components from Figma\")\n      return file\n    })\n    .catch((_error) => {\n      logger.error(\"Failed to fetch components from Figma\")\n      return null\n    })\n\n  if (!fileComponents) {\n    return\n  }\n\n  logger.info(\"Fetching URLs for SVGs\")\n\n  const iconNodes = fileComponents.meta?.components.reduce((acc, component) => {\n    const frameInfo = component.containing_frame\n\n    if (!frameInfo) {\n      return acc\n    }\n\n    if (BANNED_FRAMES.includes(frameInfo.name)) {\n      return acc\n    }\n\n    if (frameInfo.pageId !== FIGMA_ICONS_NODE_ID) {\n      return acc\n    }\n\n    acc.push({\n      node_id: component.node_id,\n      name: component.name,\n      frame_name: frameInfo.name,\n    })\n\n    return acc\n  }, [] as { node_id: string; name: string; frame_name: string }[])\n\n  if (!iconNodes) {\n    logger.error(\n      \"Found no SVGs to export. Make sure that the Figma file is correct.\"\n    )\n    return\n  }\n\n  const URLData = await client.getImage(FIGMA_FILE_ID, {\n    ids: iconNodes.map((icon) => icon.node_id),\n    format: \"svg\",\n    scale: 1,\n  })\n\n  logger.success(\"Successfully fetched URLs for SVGs\")\n\n  const length = iconNodes.length\n\n  logger.info(\"Transforming SVGs\")\n  for (let i = 0; i < length; i += 20) {\n    const slice = iconNodes.slice(i, i + 20)\n\n    const requests = slice.map(async (icon) => {\n      const URL = URLData.images[icon.node_id]\n\n      if (!URL) {\n        logger.warn(`Failed to fetch icon ${icon.name}. Skipping...`)\n        skippedIcons.push(icon.name)\n        return\n      }\n\n      let code: string | null = null\n\n      try {\n        code = await client.getResource(URL)\n      } catch (e) {\n        logger.warn(`Failed to fetch icon ${icon.name}. Skipping...`)\n        skippedIcons.push(icon.name)\n      }\n\n      if (!code) {\n        return\n      }\n\n      const { componentName, fileName, testName, fixed } = getIconData(\n        icon.name,\n        icon.frame_name\n      )\n\n      const component = await transformSvg({\n        code,\n        componentName,\n        fixed,\n      })\n\n      const filePath = resolve(output, fileName)\n\n      await fse.outputFile(filePath, component)\n\n      // Get fileName without extension\n      const ext = extname(fileName)\n      const fileNameWithoutExt = fileName.replace(ext, \"\")\n\n      // Generate a test file for the icon\n      const testFilePath = resolve(join(output, \"__tests__\"), testName)\n\n      const testFile = dedent`\n        import * as React from \"react\"\n        import { cleanup, render, screen } from \"@testing-library/react\"\n\n        import ${componentName} from \"../${fileNameWithoutExt}\"\n\n        describe(\"${componentName}\", () => {\n          it(\"should render the icon without errors\", async () => {\n            render(<${componentName} data-testid=\"icon\" />)\n\n      \n            const svgElement = screen.getByTestId(\"icon\")\n\n            expect(svgElement).toBeInTheDocument()\n\n            cleanup()\n          })\n        })\n      `\n\n      await fse.outputFile(testFilePath, testFile)\n    })\n\n    await Promise.all(requests)\n  }\n  logger.success(\"Successfully transformed SVGs\")\n\n  if (skippedIcons.length) {\n    logger.warn(\n      `Skipped ${skippedIcons.length} icons. Check the logs for more information.`\n    )\n  }\n\n  logger.info(\"Generating index file\")\n\n  await generateIndex(output)\n\n  logger.success(\"Successfully generated index file\")\n\n  logger.success(`Successfully generated ${length} icons ✨`)\n}\n","import fse from \"fs-extra\"\nimport os from \"os\"\nimport { resolve } from \"path\"\nimport dedent from \"ts-dedent\"\n\nimport { getComponentName } from \"@/commands/icons/utils\"\n\nconst BANNER =\n  dedent`\n    // This file is generated automatically.\n` + os.EOL\n\nexport async function generateIndex(path: string) {\n  let index = BANNER\n\n  const entries = await fse.readdir(path)\n\n  for (const entry of entries) {\n    if (entry === \"index.ts\" || entry === \"__tests__\") {\n      continue\n    }\n\n    const name = entry.replace(/\\.tsx?$/, \"\")\n    const exportName = getComponentName(name)\n\n    index += `export { default as ${exportName} } from \"./${name}\"${os.EOL}`\n  }\n\n  await fse.writeFile(resolve(path, \"index.ts\"), index)\n}\n","export function getComponentName(name: string) {\n  return name\n    .replace(/[-_]+/g, \" \")\n    .replace(/[^\\w\\s]/g, \"\")\n    .replace(\n      /\\s+(.)(\\w*)/g,\n      (_$1, $2, $3) => `${$2.toUpperCase() + $3.toLowerCase()}`\n    )\n    .replace(/\\w/, (s) => s.toUpperCase())\n}\n\nfunction getFileName(name: string) {\n  return `${name.replace(\"$\", \"\").replace(\"/\", \"-\")}.tsx`\n}\n\nfunction getTestName(name: string) {\n  return `${name.replace(\"$\", \"\").replace(\"/\", \"-\")}.spec.tsx`\n}\n\nconst FIXED_FRAMES = [\"Flags\", \"Brands\"]\n\nfunction isFixedIcon(name: string, frame_name: string) {\n  if (FIXED_FRAMES.includes(frame_name)) {\n    if (frame_name === \"Brands\" && name.includes(\"-ex\")) {\n      return false\n    }\n\n    return true\n  }\n\n  return false\n}\n\nexport function getIconData(name: string, frame_name: string) {\n  const componentName = getComponentName(name)\n  const fileName = getFileName(name)\n  const testName = getTestName(name)\n\n  const fixed = isFixedIcon(name, frame_name)\n\n  return {\n    componentName,\n    testName,\n    fileName,\n    fixed,\n  }\n}\n","import { transform } from \"@svgr/core\"\nimport jsx from \"@svgr/plugin-jsx\"\nimport prettier from \"@svgr/plugin-prettier\"\nimport svgo from \"@svgr/plugin-svgo\"\n\nimport { defaultTemplate, fixedTemplate } from \"@/templates\"\n\ntype TransformArgs = {\n  code: string\n  componentName: string\n  fixed?: boolean\n}\n\nexport async function transformSvg({\n  code,\n  componentName,\n  fixed = false,\n}: TransformArgs) {\n  return await transform(\n    code,\n    {\n      typescript: true,\n      replaceAttrValues: !fixed\n        ? {\n            \"#18181B\": \"{color}\",\n          }\n        : undefined,\n      svgProps: {\n        ref: \"{ref}\",\n      },\n      expandProps: \"end\",\n      plugins: [svgo, jsx, prettier],\n      jsxRuntime: \"classic\",\n      prettierConfig: {\n        semi: false,\n        parser: \"typescript\",\n      },\n      svgoConfig: {\n        plugins: [\n          {\n            name: \"preset-default\",\n            params: {\n              overrides: {\n                removeTitle: false,\n              },\n            },\n          },\n        ],\n      },\n      template: fixed ? fixedTemplate : defaultTemplate,\n    },\n    {\n      componentName,\n    }\n  )\n}\n","export const defaultTemplate = (\n  { jsx, componentName }: { jsx: any; componentName: string },\n  { tpl }: { tpl: any }\n) => {\n  return tpl`\n  import * as React from \"react\"\n\n  import type { IconProps } from \"../types\"\n\n  const ${componentName} = React.forwardRef<SVGSVGElement, IconProps>(({ color = \"currentColor\", ...props }, ref) => {\n    return (\n      ${jsx}\n    )\n  })\n  ${componentName}.displayName = \"${componentName}\"\n\n  export default ${componentName}\n  `\n}\n\nexport const fixedTemplate = (\n  { jsx, componentName }: { jsx: any; componentName: string },\n  { tpl }: { tpl: any }\n) => {\n  return tpl`\n  import * as React from \"react\"\n\n  import type { IconProps } from \"../types\"\n\n  const ${componentName} = React.forwardRef<SVGSVGElement, Omit<IconProps, \"color\">>((props, ref) => {\n    return (\n      ${jsx}\n    )\n  })\n  ${componentName}.displayName = \"${componentName}\"\n\n  export default ${componentName}\n  `\n}\n","export const FIGMA_FILE_ID = \"TW0kRpjhpsi3sR1u4a4wF8\"\nexport const FIGMA_ICONS_NODE_ID = \"109:599\"\n\nexport const FONT_FAMILY_SANS = [\n  \"Inter\",\n  \"ui-sans-serif\",\n  \"system-ui\",\n  \"-apple-system\",\n  \"BlinkMacSystemFont\",\n  \"Segoe UI\",\n  \"Roboto\",\n  \"Helvetica Neue\",\n  \"Arial\",\n  \"Noto Sans\",\n  \"sans-serif\",\n  \"Apple Color Emoji\",\n  \"Segoe UI Emoji\",\n  \"Segoe UI Symbol\",\n  \"Noto Color Emoji\",\n]\n\nexport const FONT_FAMILY_MONO = [\n  \"Roboto Mono\",\n  \"ui-monospace\",\n  \"SFMono-Regular\",\n  \"Menlo\",\n  \"Monaco\",\n  \"Consolas\",\n  \"Liberation Mono\",\n  \"Courier New\",\n  \"monospace\",\n]\n","import colors from \"picocolors\"\n\nconst PREFIX = colors.magenta(\"[toolbox]\")\n\nexport const logger = {\n  info: (message: string) => {\n    console.log(`${PREFIX} ${colors.gray(message)}`)\n  },\n  success: (message: string) => {\n    console.log(`${PREFIX} ${colors.green(message)}`)\n  },\n  warn: (message: string) => {\n    console.log(`${PREFIX} ${colors.yellow(message)}`)\n  },\n  error: (message: string) => {\n    console.log(`${PREFIX} ${colors.red(message)}`)\n  },\n}\n","import fse from \"fs-extra\"\nimport path from \"path\"\nimport type { CSSProperties } from \"react\"\nimport { Node, PaintGradient, PaintType } from \"../../figma\"\n\nimport {\n  FIGMA_FILE_ID,\n  FONT_FAMILY_MONO,\n  FONT_FAMILY_SANS,\n} from \"../../constants\"\nimport { client } from \"../../figma-client\"\nimport { logger } from \"../../logger\"\nimport {\n  colorToRGBA,\n  createLinearGradientComponent,\n  gradientValues,\n} from \"./utils/colors\"\nimport { createDropShadowVariable } from \"./utils/effects\"\n\ntype GenerateTokensArgs = {\n  output: string\n}\n\ntype Tokens = {\n  colors: {\n    dark: Record<string, string>\n    light: Record<string, string>\n  }\n  effects: {\n    dark: Record<string, string>\n    light: Record<string, string>\n  }\n  components: {\n    dark: Record<string, CSSProperties>\n    light: Record<string, CSSProperties>\n  }\n}\n\nexport async function generateTokens({ output }: GenerateTokensArgs) {\n  logger.info(\"Fetching file styles\")\n\n  const res = await client.getFileStyles(FIGMA_FILE_ID).catch((err) => {\n    logger.error(`Failed to fetch file styles: ${err.message}`)\n    process.exit(1)\n  })\n\n  logger.success(\"Fetched file styles successfully\")\n\n  const colorNodeIds: string[] = []\n\n  const textNodeIds: string[] = []\n\n  const effectNodeIds: string[] = []\n\n  res.meta?.styles.forEach((style) => {\n    if (style.style_type === \"FILL\") {\n      colorNodeIds.push(style.node_id)\n    }\n\n    if (style.style_type === \"TEXT\") {\n      textNodeIds.push(style.node_id)\n    }\n\n    if (style.style_type === \"EFFECT\") {\n      effectNodeIds.push(style.node_id)\n    }\n  })\n\n  logger.info(\"Fetching file nodes\")\n  const [colorStyles, textStyles, effectStyles] = await Promise.all([\n    client.getFileNodes<\"RECTANGLE\">(FIGMA_FILE_ID, {\n      ids: colorNodeIds,\n    }),\n    client.getFileNodes(FIGMA_FILE_ID, {\n      ids: textNodeIds,\n    }),\n    client.getFileNodes<\"RECTANGLE\">(FIGMA_FILE_ID, {\n      ids: effectNodeIds,\n    }),\n  ])\n    .catch((err) => {\n      logger.error(`Failed to fetch file nodes: ${err.message}`)\n      process.exit(1)\n    })\n    .finally(() => {\n      logger.success(\"Fetched file nodes successfully\")\n    })\n\n  const themeNode: Tokens = {\n    colors: {\n      dark: {},\n      light: {},\n    },\n    effects: {\n      dark: {},\n      light: {},\n    },\n    components: {\n      dark: {},\n      light: {},\n    },\n  }\n\n  const typo = Object.values(textStyles.nodes).reduce((acc, curr) => {\n    if (!curr) {\n      return acc\n    }\n\n    const node = curr.document as unknown as Node<\"TEXT\">\n\n    const isText = node.name.startsWith(\"Text\")\n\n    if (isText) {\n      const [_parent, identifier] = node.name.split(\"/\")\n      const { lineHeightPx, fontWeight, fontSize } = node.style\n\n      const name = \".\" + identifier.toLowerCase().replace(\"text\", \"txt\")\n\n      const style: CSSProperties = {\n        fontSize: `${fontSize / 16}rem`,\n        lineHeight: `${lineHeightPx / 16}rem`,\n        fontWeight: `${fontWeight}`,\n        fontFamily: FONT_FAMILY_SANS.join(\", \"),\n      }\n\n      acc[name] = style\n\n      return acc\n    }\n\n    const isHeader = node.name.startsWith(\"Headers\")\n\n    if (isHeader) {\n      const [theme, identifier] = node.name.split(\"/\")\n\n      const formattedTheme = theme.toLowerCase().replace(\"headers \", \"\")\n      const formattedIdentifier = identifier.toLowerCase()\n\n      const name = \".\" + `${formattedIdentifier}-${formattedTheme}`\n\n      const { lineHeightPx, fontSize, fontWeight } = node.style\n\n      const style: CSSProperties = {\n        fontSize: `${fontSize / 16}rem`,\n        lineHeight: `${lineHeightPx / 16}rem`,\n        fontWeight: `${fontWeight}`,\n        fontFamily: FONT_FAMILY_SANS.join(\", \"),\n      }\n\n      acc[name] = style\n\n      return acc\n    }\n\n    const isCodeBlock = node.name.startsWith(\"Code\")\n\n    if (isCodeBlock) {\n      const [_parent, identifier] = node.name.split(\"/\")\n\n      const formattedIdentifier = \".\" + \"code-\" + identifier.toLowerCase()\n\n      const { lineHeightPx, fontSize, fontWeight } = node.style\n\n      const style: CSSProperties = {\n        fontSize: `${fontSize / 16}rem`,\n        lineHeight: `${lineHeightPx / 16}rem`,\n        fontWeight: `${fontWeight}`,\n        fontFamily: FONT_FAMILY_MONO.join(\", \"),\n      }\n\n      acc[formattedIdentifier] = style\n\n      return acc\n    }\n\n    return acc\n  }, {} as Record<string, CSSProperties>)\n\n  const typoPath = path.join(output, \"tokens\", \"typography.ts\")\n\n  logger.info(`Writing typography tokens to file`)\n  await fse\n    .outputFile(\n      typoPath,\n      `export const typography = ${JSON.stringify(typo, null, 2)}`\n    )\n    .then(() => {\n      logger.success(`Typography tokens written to file successfully`)\n    })\n    .catch((err) => {\n      logger.error(`Failed to write typography tokens to file: ${err.message}`)\n      process.exit(1)\n    })\n\n  Object.values(colorStyles.nodes).reduce((acc, curr) => {\n    if (!curr) {\n      return acc\n    }\n\n    const [theme, _, variable] = curr.document.name.split(\"/\")\n\n    const lowerCaseTheme = theme.toLowerCase()\n\n    if (lowerCaseTheme !== \"light\" && lowerCaseTheme !== \"dark\") {\n      return acc\n    }\n\n    const fills = curr.document.fills\n\n    const solid = fills.find((fill) => fill.type === \"SOLID\")\n    const gradient = fills.find((fill) => fill.type === \"GRADIENT_LINEAR\")\n\n    if (!solid && !gradient) {\n      return acc\n    }\n\n    const solidVariable = `--${variable}`\n    const gradientIdentifier = `${variable}-gradient`\n\n    if (solid && solid.color) {\n      acc[\"colors\"][lowerCaseTheme][solidVariable] = colorToRGBA(\n        solid.color,\n        solid.opacity\n      )\n    }\n\n    if (gradient) {\n      const values = gradientValues(gradient as PaintGradient)\n\n      if (values) {\n        if (values.type === PaintType.GRADIENT_LINEAR) {\n          const toVariable = `--${gradientIdentifier}-to`\n          const fromVariable = `--${gradientIdentifier}-from`\n\n          const component = createLinearGradientComponent({\n            ...values,\n            to: toVariable,\n            from: fromVariable,\n          })\n\n          if (component) {\n            acc[\"colors\"][lowerCaseTheme][fromVariable] = values.from\n            acc[\"colors\"][lowerCaseTheme][toVariable] = values.to\n\n            acc[\"components\"][lowerCaseTheme][`.${gradientIdentifier}`] =\n              component\n          }\n        } else {\n          logger.warn(`Unsupported gradient type: ${values.type}`)\n        }\n      }\n    }\n\n    return acc\n  }, themeNode)\n\n  Object.values(effectStyles.nodes).reduce((acc, curr) => {\n    if (!curr) {\n      return acc\n    }\n\n    const [theme, type, variable] = curr.document.name.split(\"/\")\n\n    if (!type || !variable) {\n      return acc\n    }\n\n    const lowerCaseTheme = theme.toLowerCase()\n    const lowerCaseType = type.toLowerCase()\n\n    if (lowerCaseTheme !== \"light\" && lowerCaseTheme !== \"dark\") {\n      return acc\n    }\n\n    const effects = curr.document.effects\n\n    if (!effects) {\n      return acc\n    }\n\n    const identifier = `--${lowerCaseType}-${variable}`\n\n    /**\n     * Figma returns effects in reverse order\n     * so we need to reverse them back to get the correct order\n     */\n    const reversedEffects = effects.reverse()\n\n    const value = createDropShadowVariable(reversedEffects, identifier)\n\n    if (!value) {\n      return acc\n    }\n\n    acc[\"effects\"][lowerCaseTheme][identifier] = value\n\n    return acc\n  }, themeNode)\n\n  logger.info(\"Writing tokens to files\")\n  logger.info(\"Writing colors to file\")\n\n  const colorTokensPath = path.join(output, \"tokens\", \"colors.ts\")\n\n  await fse\n    .outputFile(\n      colorTokensPath,\n      `export const colors = ${JSON.stringify(themeNode.colors, null, 2)}`\n    )\n    .then(() => {\n      logger.success(\"Wrote colors to file successfully\")\n    })\n    .catch((err) => {\n      logger.error(`Failed to write colors to file: ${err.message}`)\n      process.exit(1)\n    })\n\n  logger.info(\"Writing effects to file\")\n\n  const effectTokensPath = path.join(output, \"tokens\", \"effects.ts\")\n  await fse\n    .outputFile(\n      effectTokensPath,\n      `export const effects = ${JSON.stringify(themeNode.effects, null, 2)}`\n    )\n    .then(() => {\n      logger.success(\"Wrote effects to file successfully\")\n    })\n    .catch((err) => {\n      logger.error(`Failed to write effects to file: ${err.message}`)\n      process.exit(1)\n    })\n\n  logger.info(\"Writing components to file\")\n\n  const componentTokensPath = path.join(output, \"tokens\", \"components.ts\")\n  await fse\n    .outputFile(\n      componentTokensPath,\n      `export const components = ${JSON.stringify(\n        themeNode.components,\n        null,\n        2\n      )}`\n    )\n    .then(() => {\n      logger.success(\"Wrote components to file successfully\")\n    })\n    .catch((err) => {\n      logger.error(`Failed to write components to file: ${err.message}`)\n      process.exit(1)\n    })\n\n  logger.success(\"Wrote tokens to files successfully\")\n\n  logger.info(\"Extending Tailwind config\")\n\n  const colorsExtension: Record<string, any> = {}\n\n  Object.keys(themeNode.colors.light).reduce((acc, curr) => {\n    const [prefix, style, state, context, ...others] =\n      curr.split(/(?<=\\w)-(?=\\w)/)\n\n    if (\n      state === \"gradient\" ||\n      context === \"gradient\" ||\n      (others.length > 0 && others.includes(\"gradient\"))\n    ) {\n      // We don't want to add gradients to the tailwind config, as they are added as components\n      return acc\n    }\n\n    const fixedPrefix = prefix.replace(\"--\", \"\")\n\n    if (!acc[fixedPrefix]) {\n      acc[fixedPrefix] = {}\n    }\n\n    if (!acc[fixedPrefix][style]) {\n      acc[fixedPrefix][style] = {}\n    }\n\n    if (!state) {\n      acc[fixedPrefix][style] = {\n        ...acc[fixedPrefix][style],\n        DEFAULT: `var(${curr})`,\n      }\n\n      return acc\n    }\n\n    if (!acc[fixedPrefix][style][state]) {\n      acc[fixedPrefix][style][state] = {}\n    }\n\n    if (!context) {\n      acc[fixedPrefix][style][state] = {\n        ...acc[fixedPrefix][style][state],\n        DEFAULT: `var(${curr})`,\n      }\n\n      return acc\n    }\n\n    if (context === \"gradient\") {\n      // We don't want to add gradients to the tailwind config, as they are added as components\n      return acc\n    }\n\n    if (!acc[fixedPrefix][style][state][context]) {\n      acc[fixedPrefix][style][state][context] = {}\n    }\n\n    acc[fixedPrefix][style][state][context] = {\n      ...acc[fixedPrefix][style][state][context],\n      DEFAULT: `var(${curr})`,\n    }\n\n    return acc\n  }, colorsExtension)\n\n  const boxShadowExtension: Record<string, any> = {}\n\n  Object.keys(themeNode.effects.light).reduce((acc, curr) => {\n    const key = `${curr.replace(\"--\", \"\")}`\n\n    acc[key] = `var(${curr})`\n\n    return acc\n  }, boxShadowExtension)\n\n  const themeExtension = {\n    extend: {\n      colors: {\n        ui: colorsExtension,\n      },\n      boxShadow: boxShadowExtension,\n    },\n  }\n\n  const tailwindConfigPath = path.join(output, \"extension\", \"theme.ts\")\n  await fse\n    .outputFile(\n      tailwindConfigPath,\n      `export const theme = ${JSON.stringify(themeExtension, null, 2)}`\n    )\n    .then(() => {\n      logger.success(\"Wrote Tailwind config extension successfully\")\n    })\n    .catch((err) => {\n      logger.error(`Failed to write Tailwind config extension: ${err.message}`)\n      process.exit(1)\n    })\n\n  logger.success(\"Extended Tailwind config successfully\")\n\n  // TODO: Add text styles\n}\n","import { PaintType, type Color, type PaintGradient, type Vector } from \"@/figma\"\nimport { logger } from \"@/logger\"\nimport type { CSSProperties } from \"react\"\n\n/**\n * Normalizes a color's opacity to a 0-1 range.\n * @param opacity The opacity to normalize.\n * @returns The normalized opacity.\n */\nfunction normalizeOpacity(opacity?: number) {\n  opacity = opacity !== undefined ? opacity : 1\n\n  return Math.round(opacity * 100) / 100\n}\n\n/**\n * Normalizes a channel value to a 0-255 range.\n * @param value The channel value to normalize.\n * @returns The normalized channel value.\n */\nfunction normalizeChannelValue(value: number) {\n  return Math.round(value * 255)\n}\n\n/**\n * Converts a Color to an RGBA string.\n * @param color The color to convert to RGBA.\n * @param opacity The opacity to apply to the color.\n * @returns The RGBA string.\n */\nfunction colorToRGBA(color: Color, opacity?: number): string {\n  const red = normalizeChannelValue(color.r)\n  const green = normalizeChannelValue(color.g)\n  const blue = normalizeChannelValue(color.b)\n\n  /**\n   * How Figma returns opacity for colors is a bit weird.\n   * They always return the alpha channel as 1, even if the color is less than solid.\n   * Instead, they return the opacity in a seperate opacity property.\n   * So we need to check if the opacity is defined, and if it is,\n   * use that for the alpha channel instead.\n   */\n  const alpha =\n    opacity !== undefined\n      ? normalizeOpacity(opacity)\n      : Math.round(color.a * 100) / 100\n\n  return `rgba(${red}, ${green}, ${blue}, ${alpha})`\n}\n\n/**\n * Calculates the gradient degree of a gradient.\n * @param handlebarPositions The handlebar positions of the gradient.\n * @returns The gradient degree.\n */\nfunction calculateGradientDegree(handlebarPositions: Vector[]): number {\n  const startPoint = handlebarPositions[0]\n  const endPoint = handlebarPositions[1]\n\n  const angleRadians = Math.atan2(\n    endPoint.y - startPoint.y,\n    endPoint.x - startPoint.x\n  )\n\n  const angleDegrees = (angleRadians * 180) / Math.PI\n\n  const normalizedAngleDegrees = (angleDegrees + 360) % 360\n\n  // Rotate the angle by 90 degrees to get the correct angle for CSS gradients\n  const rotatedAngleDegrees = normalizedAngleDegrees + 90\n\n  return rotatedAngleDegrees\n}\n\ninterface GradientValues {\n  type: PaintType\n}\n\ninterface LinearGradientValues extends GradientValues {\n  type: PaintType.GRADIENT_LINEAR\n  opacity: number\n  degree: number\n  from: string\n  to: string\n}\n\n/**\n * Get the values of a linear gradient.\n * @param gradient\n * @returns\n */\nfunction linearGradientValues(gradient: PaintGradient): LinearGradientValues {\n  const opacity = normalizeOpacity(gradient.opacity) * 100\n  const degree = calculateGradientDegree(gradient.gradientHandlePositions)\n  const from = colorToRGBA(gradient.gradientStops[0].color)\n  const to = colorToRGBA(gradient.gradientStops[1].color)\n\n  return {\n    type: gradient.type as PaintType.GRADIENT_LINEAR,\n    opacity,\n    degree,\n    from,\n    to,\n  }\n}\n\ninterface CreateGradientComponentProps {\n  type: PaintType\n}\n\ninterface CreateLinearGradientComponentProps\n  extends CreateGradientComponentProps {\n  type: PaintType.GRADIENT_LINEAR\n  degree: number\n  from: string\n  to: string\n  opacity: number\n}\n\n/**\n * Create a CSSProperties object for a linear gradient.\n * @param props\n * @returns\n */\nfunction createLinearGradientComponent({\n  degree,\n  from,\n  to,\n  opacity,\n}: CreateLinearGradientComponentProps): CSSProperties {\n  return {\n    backgroundImage: `linear-gradient(${degree}deg, var(${from}), var(${to}))`,\n    opacity: `${opacity}%`,\n  }\n}\n\n/**\n * Get the values of a gradient based on its type.\n * @param gradient\n * @returns\n */\nfunction gradientValues(gradient: PaintGradient) {\n  if (gradient.type === PaintType.GRADIENT_LINEAR) {\n    return linearGradientValues(gradient)\n  }\n\n  logger.warn(`The gradient type \"${gradient.type}\" is not supported.`)\n  return null\n}\n\nexport { colorToRGBA, createLinearGradientComponent, gradientValues }\n","import { Effect } from \"@/figma\"\nimport { colorToRGBA } from \"./colors\"\n\n/**\n * We know that we will need to correct the Y value of the inset shadows\n * on these effects due to the difference in the way Figma and CSS\n * handle shadows.\n */\nconst SPECIAL_IDENTIFIERS = [\n  \"--buttons-colored\",\n  \"--buttons-neutral\",\n  \"--buttons-neutral-focus\",\n  \"--buttons-colored-focus\",\n]\n\nfunction createDropShadowVariable(effects: Effect[], identifier: string) {\n  const shadows = effects.filter(\n    (effect) => effect.type === \"DROP_SHADOW\" || effect.type === \"INNER_SHADOW\"\n  )\n\n  if (shadows.length === 0) {\n    return null\n  }\n\n  const value = shadows\n    .map((shadow) => {\n      const { color, offset, radius, spread, type } = shadow\n\n      const x = offset?.x ?? 0\n      let y = offset?.y ?? 0\n\n      if (\n        SPECIAL_IDENTIFIERS.includes(identifier) &&\n        type === \"INNER_SHADOW\" &&\n        y > 0\n      ) {\n        y = y - 1\n      }\n\n      const b = radius\n      const s = spread ?? 0\n\n      const c = color ? colorToRGBA(color) : \"\"\n\n      const t = type === \"INNER_SHADOW\" ? \"inset\" : \"\"\n\n      return `${x}px ${y}px ${b}px ${s}px ${c} ${t}`.trim()\n    })\n    .join(\", \")\n\n  if (value.length === 0) {\n    return null\n  }\n\n  return value\n}\n\nexport { createDropShadowVariable }\n","{\n  \"name\": \"@medusajs/toolbox\",\n  \"private\": true,\n  \"version\": \"2.1.3\",\n  \"description\": \"CLI tool for importing Figma designs for Medusa UI\",\n  \"license\": \"MIT\",\n  \"author\": \"Kasper Kristensen <kasper@medusajs.com>\",\n  \"bin\": \"./bin/toolbox.js\",\n  \"scripts\": {\n    \"build\": \"tsup\"\n  },\n  \"dependencies\": {\n    \"@svgr/core\": \"8.0.0\",\n    \"@svgr/plugin-jsx\": \"8.0.1\",\n    \"@svgr/plugin-prettier\": \"8.0.1\",\n    \"@svgr/plugin-svgo\": \"8.0.1\",\n    \"axios\": \"^0.24.0\",\n    \"axios-retry\": \"^3.1.9\",\n    \"commander\": \"11.0.0\",\n    \"dotenv\": \"^16.4.5\",\n    \"fs-extra\": \"11.1.1\",\n    \"picocolors\": \"^1.0.0\",\n    \"ts-dedent\": \"2.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/fs-extra\": \"11.0.1\",\n    \"@types/react\": \"^18.2.14\",\n    \"eslint\": \"7.32.0\",\n    \"react\": \"^18.2.0\",\n    \"tsup\": \"7.1.0\",\n    \"typescript\": \"5.1.6\"\n  }\n}\n","import { createCli } from \"./create-cli\"\n\ncreateCli()\n  .then(async (cli) => cli.parseAsync(process.argv))\n  .catch((err) => {\n    console.error(err)\n    process.exit(1)\n  })\n"],"mappings":"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","names":["axios","accessToken","accessToken","axios","fse","resolve","dedent","resolve","path","resolve","jsx","fse","resolve","dedent","fse","fse"]}